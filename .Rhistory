model3 <- rpart(mpg ~ hp + wt, data = mtcars)
plot(model3)
text(model3, use.n = TRUE, all = TRUE, cex = 0.8)
plot(model3,text(model3, use.n = TRUE, all = TRUE, cex = 0.8)
)
packageVersion("rpart")
install.packages("randomForest")
library(randomForest)
model4 <- randomForest(cost~., data=data, nodesize=5, ntree = 500, mtry = 4)
data_nona <- na.omit(data)
model4 <- randomForest(cost~., data=data_nona, nodesize=5, ntree = 500, mtry = 4)
model4pred <- predict(model4, newdata = new.customers)
model4pred
nrow(data)
nrow(data)*80%
nrow(data)*0.80
nrow(data)
nrow(data) * 0.8
data[1:nrow(data) * 0.8,]
data[1:as.integer(nrow(data) * 0.8),]
data-training_data
training_data <- data[1:as.integer(nrow(data) * 0.8),]
data-training_data
data[-training_data,]
data[-c(1:as.integer(nrow(data) * 0.8),]
data[-c(1:as.integer(nrow(data) * 0.8)),]
as.integer(nrow(data)*0.2
as.integer(nrow(data)*0.2
as.integer(nrow(data))*0.2
data[-c(1:as.integer(nrow(data) * 0.8)),]
as.integer(nrow(data))*0.2
training_data <- data[1:as.integer(nrow(data) * 0.8),]
testing_data <- data[-c(1:as.integer(nrow(data) * 0.8)),]
testing_model1 <- glm(cost ~.+(A+B+C+D+E+F+G)^2, data = training_data)
testing_model3 <- rpart(cost~., data = training_data)
testing_model4 <- randomForest(cost~., data=training_data, nodesize=5, ntree = 500, mtry = 4)
testing_model4 <- randomForest(cost~., data=na.omit(training_data), nodesize=5, ntree = 500, mtry = 4)
testPred1 <- predict(testing_model1, newdata = testing_data)
testPred3 <- predict(testing_model3, newdata = testing_data)
testPred4 <- predict(testing_model4, newdata = testing_data)
testPred1
testPred1
testPred3
testPred4
training_data <- data_nona[1:as.integer(nrow(data_nona) * 0.8),]
testing_data <- data_nona[-c(1:as.integer(nrow(data_nona) * 0.8)),]
testing_model1 <- glm(cost ~.+(A+B+C+D+E+F+G)^2, data = training_data)
testing_model3 <- rpart(cost~., data = training_data)
testing_model4 <- randomForest(cost~., data=training_data, nodesize=5, ntree = 500, mtry = 4)
testPred1 <- predict(testing_model1, newdata = testing_data)
testPred3 <- predict(testing_model3, newdata = testing_data)
testPred4 <- predict(testing_model4, newdata = testing_data)
testPred1
testPred4
testing_data %>% mutate(testPredict = testPred1)
Test1 <- testing_data %>% mutate(testPredict = testPred1)
Test3 <- testing_data %>% mutate(testPredict = testPred3)
Test4 <- testing_data %>% mutate(testPredict = testPred4)
deviance(Test1$cost,Test1$testPredict, family="gaussian")
R2(Test1$cost, Test1$testPredict, family = "gaussian")
R2(Test1$cost, Test1$testPredict, family = "gaussian")
R2(Test3$cost, Test3$testPredict, family = "gaussian")
R2(Test4$cost, Test4$testPredict, family = "gaussian")
R2(Test1$cost, Test1$testPredict, family = "gaussian")
R2(Test3$cost, Test3$testPredict, family = "gaussian")
R2(Test4$cost, Test4$testPredict, family = "gaussian")
model1pred
# predict
model1pred <- predict(model1, newdata = new.customers)
model1pred
model3pred
RegressionModel <- R2(Test1$cost, Test1$testPredict, family = "gaussian") # 0.4515599
CART <- R2(Test3$cost, Test3$testPredict, family = "gaussian") # 0.3683401
RandomForest <- R2(Test4$cost, Test4$testPredict, family = "gaussian") # 0.368745
OOS_Perform <- data.frame(Model = c("RegressionModel", "CART", "RandomForest"),
R2 = c(RegressionModel, CART, RandomForest))
OOS_Perform
ggplot(OOS_Perform)+
geom_bar(aes(y = R2))
ggplot(OOS_Perform)+
geom_col(aes(y = R2))
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2))
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2))+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), color = "lightblue2")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightblue2")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightblue3")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightskyblue3")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
xlim(0, 0.6)
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
ylim(0, 0.6)+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)", labels = R2)+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2, labels = R2))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2, label = R2))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+4, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+1, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.1, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.01, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.05, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.03, label = round(R2,2)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.03, label = round(R2,3)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
data
mean(data$cost)
mean(data_nona$cost)
mean(data$cost)
mean(data_nona$cost)
sd(data$cost)
sd(data_nona$cost)
sd(data$cost)
sd(data_nona$cost)
# Choosing model through OOS
training_data <- data_nona[1:as.integer(nrow(data_nona) * 0.8),]
testing_data <- data_nona[-c(1:as.integer(nrow(data_nona) * 0.8)),]
### train model
testing_model1 <- glm(cost ~.+(A+B+C+D+E+F+G)^2, data = training_data)
testing_model2 <- ctree(cost~., data = training_data[,-c(2,6)])
#DECISION TREE
library(tree)
library('sandwich')
library('party')
library('rpart')
library('rpart')
testing_model2 <- ctree(cost~., data = training_data[,-c(2,6)])
testing_model3 <- rpart(cost~., data = training_data)
testing_model4 <- randomForest(cost~., data=training_data, nodesize=5, ntree = 500, mtry = 4)
#RANDOM FOREST
library(randomForest)
testing_model4 <- randomForest(cost~., data=training_data, nodesize=5, ntree = 500, mtry = 4)
### Predict Using testing data as newdata
testPred1 <- predict(testing_model1, newdata = testing_data)
testPred2 <- predict(testing_model2, newdata = testing_data)
testPred3 <- predict(testing_model3, newdata = testing_data)
testPred4 <- predict(testing_model4, newdata = testing_data)
### Compare with actual data
Test1 <- testing_data %>% mutate(testPredict = testPred1)
##################
###import data ###
##################
library(readxl)
library(readr)
library(tidyverse)
library(ggplot2)
library(stringr)
source("DataAnalyticsFunctions.R")
source("DataAnalyticsFunctions.R")
### Compare with actual data
Test1 <- testing_data %>% mutate(testPredict = testPred1)
Test2 <- testing_data %>% mutate(testPredict = testPred2)
Test3 <- testing_data %>% mutate(testPredict = testPred3)
Test4 <- testing_data %>% mutate(testPredict = testPred4)
### R2 calculating and plotting
RegressionModel <- R2(Test1$cost, Test1$testPredict, family = "gaussian") # 0.4515599
CART_ctree <- R2(Test2$cost, Test2$testPredict, family = "gaussian") # 0.207664
CART_rpart <- R2(Test3$cost, Test3$testPredict, family = "gaussian") # 0.3683401
RandomForest <- R2(Test4$cost, Test4$testPredict, family = "gaussian") # 0.368745
OOS_Perform <- data.frame(Model = c("RegressionModel", "CART_ctree", "CART_rpart", "RandomForest"),
R2 = c(RegressionModel, CART_ctree, CART_rpart, RandomForest))
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.03, label = round(R2,3)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
###############################
# Expected Return
compare <- data_nona$cost-predict(model1, newdata = data_nona)
###############################
# Expected Return
compare <- data_nona$cost-predict(model1, newdata = data_nona)
compare <- data.frame(diff = compare)
compare$diff <- as.numeric(compare$diff)
compare <- compare %>% mutate(smaller = compare$diff > 0,) %>% cbind(data_nona)
sd <- sd(compare$diff)
n <- length(compare$diff)
se <- sd/sqrt(n)
ERplot <- data.frame(x = seq(-1,-300, by = -1))
ERplot <- ERplot %>% mutate(tstat = (x-mean(compare$diff))/sd,
P_Win = 1-pnorm(tstat, lower.tail = TRUE),
OurQuote1 = model1pred[1] + x,
OurQuote2 = model1pred[2] + x,
OurQuote3 = model1pred[3] + x)
ERplot <- ERplot %>% mutate(ExpectReturn = (OurQuote1+OurQuote2+OurQuote3)*P_Win)
ERplot %>% filter(ExpectReturn == max(ExpectReturn))
ggplot(data = ERplot)+
geom_line(aes(x = x, y = ExpectReturn))+
geom_text(aes(x = -66, y = 1600, label = "1639.678"))+
geom_text(aes(x = -66, y = 500, label = "x= -66"))+
ylim(500,2000)+
theme_bw()
ourQuote <- model1pred -66
ourQuote
model1pred
model2pred #ctree
model3pred #rpart
model4pred
ggplot(OOS_Perform)+
geom_col(aes(x = Model, y = R2), fill = "lightsteelblue3")+
geom_text(aes(x = Model, y = R2+0.03, label = round(R2,3)))+
ylim(0, 0.6)+
labs(title = "OOS Performance (R2)")+
theme_bw()
library(readxl)
library(readr)
library(readr)
library(tidyverse)
library(ggplot2)
library(stringr)
source("DataAnalyticsFunctions.R")
data <- read_csv("https://raw.githubusercontent.com/hereisjulia/DataScience_MQM/main/Case2/ALLSTATEcost.csv")
data <- read_csv("https://raw.githubusercontent.com/hereisjulia/DataScience_MQM/main/Case2/ALLSTATEcost.csv")
View(data)
data[, names(data)! %in% drop]
data[, !names(data) %in% drop]
data <- data[, !names(data) %in% drop]
ggplot(data = data)+
geom_point(aes(x = car_age, y = cost))
ggplot(data = data)+
geom_point(aes(x = car_age, y = cost, color = car_value))
ggplot(data = data)+
geom_jitter(aes(x = car_age, y = cost, color = car_value))
ggplot(data = data)+
geom_jitter(aes(x = car_value, y = cost, color = car_age))
library(readr)
library(readr)
library(tidyverse)
library(readr)
library(tidyverse)
library(ggplot2)
read_csv("https://github.com/hereisjulia/DataScience_MQM/blob/main/TermProject/Loan_default.csv")
read_csv("https://raw.githubusercontent.com/hereisjulia/DataScience_MQM/main/TermProject/Loan_default.csv")
data <- read_csv("https://raw.githubusercontent.com/hereisjulia/DataScience_MQM/main/TermProject/Loan_default.csv")
View(data)
str(data)
summary(data)
str(data)
length(data)
ggplot(data=data)+
geom_line(aes(x = Age, y = Default))
library(ggplot2)
ggplot(data=data)+
geom_line(aes(x = Age, y = Default))
ggplot(data=data)+
geom_line(aes(x = Default, y = Age))
ggplot(data=data)+
geom_col(aes(x = Default, y = Age))
ggplot(data=data)+
geom_col(aes(x = Age, y = Default))
ggplot(data=data)+
geom_col(aes(x=income, y=Default))
ggplot(data=data)+
geom_col(aes(x=Income, y=Default))
ggplot(data=data)+
geom_area(aes(x=Income, y=Default))
library(readr)
library(readr)
library(tidyverse)
library(ggplot2)
ggplot(data=data)+
geom_area(aes(x=Income, y=Default))
count(data)
testCorr <- data[,-1]
testCorr <- na.omit(testCorr)
library(corrplot)
Corr <- cor(testCorr)
CorrplotColor <- brewer.pal(n = 4, name = "BrBG")
as.factor(testCorr$Education)
testCorr$Education <- as.factor(testCorr$Education)
testCorr
str(data)
testCorr$HasCoSigner <- as.factor(testCorr$HasCoSigner)
testCorr$Education <- as.factor(testCorr$Education)
testCorr$EmploymentType <- as.factor(testCorr$EmploymentType)
testCorr$MaritalStatus <- as.factor(testCorr$MaritalStatus)
testCorr$HasMortgage <- as.factor(testCorr$HasMortgage)
testCorr$HasDependents <- as.factor(testCorr$HasDependents)
testCorr$LoanPurpose <- as.factor(testCorr$LoanPurpose)
testCorr$HasCoSigner <- as.factor(testCorr$HasCoSigner)
testCorr
Corr <- cor(testCorr)
testCorr[, c(14,15,17)]
testCorr[, c(13,14,16)]
library(stringr)
testCorr[, c(13,14,16)] %>% str_replace_all("Yes", 1)
testCorr[, c(13,14,16)] %>% str_replace_all("Yes", replacement = 1)
testCorr %>% str_replace_all(HasMortgage=="Yes", replacement = 1)
str_replace_all(testCorr$HasMortgage=="Yes", replacement = 1)
testCorr <- data[,-1]
testCorr <- na.omit(testCorr)
str_replace_all(testCorr$HasMortgage=="Yes", replacement = 1)
ifelse(testCorr$HasMortgage == "Yes", 1, 0)
testCorr$HasMortgage <- ifelse(testCorr$HasMortgage == "Yes", 1, 0)
testCorr$HasDependents <- ifelse(testCorr$HasDependents == "Yes", 1, 0)
testCorr$HasCoSigner <- ifelse(testCorr$HasDependents == "Yes", 1, 0)
testCorr
library(readr)
library(readr)
library(tidyverse)
library(readr)
library(tidyverse)
library(ggplot2)
library(stringr)
data <- read_csv("https://raw.githubusercontent.com/hereisjulia/DataScience_MQM/main/TermProject/Loan_default.csv")
View(data)
str(data)
summary(data)
length(data)
count(data)
```{r}
library(RColorBrewer)
library(corrplot)
testCorr <- data[,-c(1)]
testCorr$HasMortgage <- ifelse(testCorr$HasMortgage == "Yes", 1, 0)
testCorr$HasCoSigner <- ifelse(testCorr$HasCoSigner == "Yes", 1, 0)
testCorr <- testCorr[, -c(10,11,12,15)]
str(testCorr)
testCorr$HasCoSigner
Corr <- cor(testCorr)
str(testCorr)
testCorr$HasDependents <- ifelse(testCorr$HasDependents == "Yes", 1, 0)
testCorr$HasCoSigner
Corr <- cor(testCorr)
Corr
CorrplotColor <- brewer.pal(n = 4, name = "BrBG")
corrplot(Corr, method = "square", col = rev(CorrplotColor), tl.col = "black")
heatmap(Corr,
col = brewer.pal(n = 100, name = "BrBG"),  # 颜色范围
main = "Heatmap Example",  # 主标题
xlab = "Columns",  # X轴标签
ylab = "Rows"  # Y轴标签
)
box()
heatmap(Corr,
col = brewer.pal(n = 100, name = "BrBG"),  # 颜色范围
main = "Heatmap Example",  # 主标题
xlab = "Columns",  # X轴标签
ylab = "Rows"  # Y轴标签
)
box()
heatmap(Corr,
col = brewer.pal(n = 100, name = "BrBG"),  # 颜色范围
main = "Heatmap Example",  # 主标题
xlab = "Columns",  # X轴标签
ylab = "Rows"  # Y轴标签
)
CorrplotColor <- brewer.pal(n = 8, name = "BrBG")
corrplot(Corr, method = "square", col = rev(CorrplotColor), tl.col = "black")
corrplot(Corr, method = "square", col = rev(CorrplotColor), tl.col = "black", is.corr = FALSE)
corrplot(Corr, method = "square", tl.col = "black", is.corr = FALSE)
corrplot(Corr, method = "square", tl.col = "black")
corrplot(Corr, method = "color", tl.col = "black")
corrplot(Corr, method = "color",col = CorrplotColor, tl.col = "black")
Corr
str(testCorr)
ggplot(data=data)+
geom_col(aes(x = Age, y = Default))
data_clean <- data[, != "LoanID"]
data_drop <- c("LoanID")
data_clean <- data[, -data_drop]
data_clean <- data[, !name(data) %in% data_drop]
data_clean <- data[, !names(data) %in% data_drop]
data_clean$HasMortgage <- ifelse(data_clean$HasMortgage == "Yes", 1, 0)
data_clean$HasDependents <- ifelse(data_clean$HasDependents == "Yes", 1, 0)
data_clean$HasCoSigner <- ifelse(data_clean$HasCoSigner == "Yes", 1, 0)
data_clean$Education
levels(data_clean$Education)
factor(data_clean$Education)
distinct(data_clean$Education)
unique(data_clean$Education)
education_mapping <- c("High School"= 1, "Bachelor's" = 2, "Master's" = 3, "PhD" = 4)
data_clean$Education <- as.integer(factor(data_clean$Education, levels = names(education_mapping)))
unique(data_clean$Education)
data_clean
EmploymentType_mapping <-
unique(data_clean$EmploymentType)
EmploymentType_mapping <-
unique(data_clean$EmploymentType)
unique(data_clean$EmploymentType)
EmploymentType_mapping <- c("Unemployed", "Self-employed","Part-time", "Full-time" )
data_clean$EmploymentType <- as.integer(factor(data_clean$EmploymentType, levels = names(EmploymentType_mapping)))
data_clean
EmploymentType_mapping <- c("Unemployed" = 0, "Self-employed" = 1,"Part-time" = 2, "Full-time" = 3)
data_clean$EmploymentType <- as.integer(factor(data_clean$EmploymentType, levels = names(EmploymentType_mapping)))
data_clean
data_clean <- data[, !names(data) %in% data_drop]
data_clean$HasMortgage <- ifelse(data_clean$HasMortgage == "Yes", 1, 0)
data_clean$HasDependents <- ifelse(data_clean$HasDependents == "Yes", 1, 0)
data_clean$HasCoSigner <- ifelse(data_clean$HasCoSigner == "Yes", 1, 0)
education_mapping <- c("High School"= 1, "Bachelor's" = 2, "Master's" = 3, "PhD" = 4)
data_clean$Education <- as.integer(factor(data_clean$Education, levels = names(education_mapping)))
EmploymentType_mapping <- c("Unemployed" = 0, "Self-employed" = 1,"Part-time" = 2, "Full-time" = 3)
data_clean$EmploymentType <- as.integer(factor(data_clean$EmploymentType, levels = names(EmploymentType_mapping)))
unique(data_clean$EmploymentType)
data_clean
unique(data_clean$MaritalStatus)
MaritalStatus_Mapping <- c("Single" = 0, "Divorced" = 1, "Married" = 2)
data_clean$MaritalStatus <- as.integer(factor(data_clean$MaritalStatus, levels = names(MaritalStatus_Mapping)))
data_clean
unique(data_clean$LoanPurpose)
LoanPurpose_mapping <- c("Other" = 0, "Auto" = 1, "Education" = 2, "Home" = 3, "Business" = 4)
data_clean$LoanPurpose <- as.integer(factor(data_clean$LoanPurpose, levels = names(LoanPurpose_mapping)))
data_clean
Corr <- cor(data_clean)
Corr
CorrplotColor <- brewer.pal(n = 8, name = "BrBG")
corrplot(Corr, method = "color",col = CorrplotColor, tl.col = "black")
View(data_clean)
glm(Default~., data = data_clean)
logisticRegression <- glm(Default~., data = data_clean)
count(data_clean)
n <- count(data_clean)
n
n/5
n
n/2
n
n/4
n//4
n/4
n%4
n%%4
(n-3)/4
(n-3)/4/n
(n-n%%3)/4/n
data_clean[1:63836,]
count(data_clean[1:63836,])
train_data <- data_clean[63837:,]
train_data <- data_clean[63837:.,]
# 63836
n
train_data <- data_clean[63837:255347,]
logisticRegression <- glm(Default~., data = train_data)
predict(logisticRegression, newdata = test-data)
predict(logisticRegression, newdata = test_data)
test_data <- data_clean[1:63836,]
predict(logisticRegression, newdata = test_data)
