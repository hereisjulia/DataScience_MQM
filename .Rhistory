# 在决策树上添加文本标签
text(ourtree, label = "yval")
# 绘制决策树
plot(ourtree)
# 在决策树上添加文本标签
text(ourtree, label = "yval")
### It provided the Branching rules
### (if the condition satisfied go to the "left"), and
### at each leaf of the tree it provided
### the proportion of Y = 1 (churn=Yes) in that group
###
###########################################################
###
### Finally, we can extract
### the vector of probabilities can be obtained in
Churntree[[1]]$yprob[,2]
ourtree[[1]]$yprob[,2]
data_cleaned <- na.omit(DATA)
drop2 <- c("state", "car_value")
data_cleaned <- data_cleaned[, !(names(data_cleaned) %in% drop2)]
# 创建决策树模型
ourtree <- tree(cost ~ ., data = data_cleaned)
# 打印模型摘要
summary(ourtree)
View(data_cleaned)
partition.tree(ourtree, label = "yval", add = FALSE)
# 打印模型摘要
summary(ourtree)
summary(modelq2)
partition.tree(ourtree, label = "yval", add = FALSE)
# 打印模型摘要
summary(ourtree)
View(data_cleaned)
# 创建决策树模型
ourtree <- tree(cost ~ homeowner + car_age, data = data_cleaned)
# 打印模型摘要
summary(ourtree)
# 绘制决策树
plot(ourtree)
# 在决策树上添加文本标签
text(ourtree, label = "yval")
# 绘制决策树
plot(ourtree)
partition.tree(ourtree, label = "yval", add = FALSE)
predict(ourtree, newdata = new.customers, type = "response")
predict(ourtree, newdata = new.customers, type = "response")
predict(ourtree, newdata = new.customers)
# 打印模型摘要
summary(ourtree)
install.packages("tree")
install.packages('rpart')
install.packages("rpart")
install.packages('party')
install.packages('party')
install.packages('sandwich')
library('sandwich')
library('party')
library('rpart')
model2 <- ctree(cost~., data = DATA)
model1<-tree(cost~., data = data_cleaned)
model2 <- ctree(cost~., data = data_cleaned)
model1<-tree(cost~., data = data_cleaned)
predict (model2, newdata = new.customers)
#Error: variables ‘day’, ‘homeowner’, ‘risk_factor’, ‘married_couple’, ‘C_previous’ were specified with different types from the fit
class(data$C_previous)
class(new.customers$married_couple)
new.customers$day <- as.numeric(new.customers$day)
new.customers$homeowner <- as.numeric(new.customers$homeowner)
new.customers$risk_factor <- as.numeric(new.customers$risk_factor)
new.customers$married_couple <- as.numeric(new.customers$married_couple)
new.customers$C_previous <- as.numeric(new.customers$C_previous)
model1<-tree(cost~., data = data_cleaned)
model2 <- ctree(cost~., data = data_cleaned)
predict (model2, newdata = new.customers)
str(data_cleaned)
str(new.customers)
#Error: variables ‘day’, ‘homeowner’, ‘risk_factor’, ‘married_couple’, ‘C_previous’ were specified with different types from the fit
str(data_cleaned)
str(new.customers)
names(new.customers)
str(new.customers)
#Error: variables ‘day’, ‘homeowner’, ‘risk_factor’, ‘married_couple’, ‘C_previous’ were specified with different types from the fit
str(data_cleaned)
for (col_name in columns) {
new.customers[[col_name]] <- as.numeric(new.customers[[col_name]])
}
coloumns <- names(new.customers)
for (col_name in columns) {
new.customers[[col_name]] <- as.numeric(new.customers[[col_name]])
}
for (col_name in columns) {
new.customers[[col_name]] <- as.numeric(new.customers[[col_name]])
}
coloumns <- names(new.customers)
for (col_name in coloumns) {
new.customers[[col_name]] <- as.numeric(new.customers[[col_name]])
}
str(new.customers)
model1<-tree(cost~., data = data_cleaned)
model2 <- ctree(cost~., data = data_cleaned)
predict (model2, newdata = new.customers)
model3 <- rpart(cost~., data = data_cleaned)
predict (model3, newdata = new.customers)
model2pred <- predict (model2, newdata = new.customers)
model2pred <- predict (model3, newdata = new.customers)
model2pred <- predict (model2, newdata = new.customers)
model3pred <- predict (model3, newdata = new.customers)
model2pred
model3pred
model2pred
model3pred
model2pred
model3pred
model3pred
model2pred
model3pred
modelq2pred <- predict(modelq2, newdata = new.customers)
data <- read_csv("E:/MQM_Courses/Term2/Data_Science/DataScienceMQM/Case2/ALLSTATEcost.csv")
summary(data)
names(data)
drop <- c("customer_ID","shopping_pt","record_type","time","location")
DATA <- data[,!(names(data) %in% drop)]
customerGroup <- data[, c(25, 8:15)]
customerGroup$homeowner <- customerGroup$homeowner %>% as.character() %>% str_replace_all("1", "Yes") %>% str_replace_all("0", "No")
library(RColorBrewer)
plot2Color <- brewer.pal(n = 3, name = "Pastel1")
plot(factor(homeowner) ~ cost, col = plot2Color, xlab = "Quote for customer", ylab = "Homeowner", data = customerGroup)
library(RColorBrewer)
plot2Color <- brewer.pal(n = 3, name = "Pastel1")
plot(factor(homeowner) ~ cost, col = plot2Color, xlab = "Quote for customer", ylab = "Homeowner", data = customerGroup)
## Car
```{r}
ggplot(data = CarEvaluate)+
geom_point(aes(x = car_age, y = avg_cost, color = car_value))+
theme_bw()
ggplot(data = CarEvaluate)+
geom_point(aes(x = car_age, y = avg_cost, color = car_value))+
theme_bw()
## Coverage
```{r}
coverage options A-G vs. cost
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "Level of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "Level of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "Level of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
# Q2
modelq2 <- glm(cost ~. , data = DATA)
summary(modelq2)
modelq2pred <- predict(modelq2, newdata = new.customers)
str(DATA)
modelq2pred <- predict(modelq2, newdata = new.customers)
str(new.customers)
new.customers <- readRDS("NewCustomers.Rda")
str(new.customers)
modelq2 <- glm(cost ~. , data = DATA)
modelq2pred <- predict(modelq2, newdata = new.customers)
new.customers$day <- as.numeric(new.customers$day)
new.customers$homeowner <- as.numeric(new.customers$homeowner)
new.customers$risk_factor <- as.numeric(new.customers$risk_factor)
new.customers$married_couple <- as.numeric(new.customers$married_couple)
new.customers$C_previous <- as.numeric(new.customers$C_previous)
modelq2pred <- predict(modelq2, newdata = new.customers)
modelq2pred
model2pred
model3pred
modelq2pred
preidictions <- model2pred
rbind(predictions,model3pred)
preidictions <- model2pred
rbind(predictions,model3pred)
rbind(preidictions,model3pred)
model3pred
model2pred
model3pred
modelq2pred
model2pred
model3pred
modelq2pred
model2pred
model3pred
modelq2pred
model2pred
modelq2pred
model2pred
model3pred
modelq2pred
model2pred
model3pred
model3pred
modelq2pred
model2pred
model3pred
model2pred
modelq2pred
model2pred
modelq2pred
model2pred
model3pred
model2pred
modelq2pred
model2pred
modelq2pred
model2pred
modelq2pred
model2pred
modelq2pred
as.dataframe(modelq2pred)
modelq2pred
model2pred
model3pred
View(R2)
R2(y, modelq2pred,"gaussian")
y <- c(1,2,3)
R2(y, modelq2pred,"gaussian")
modelq2pred
y <- c(549,627,619)
R2(y, modelq2pred,"gaussian")
modelq2 <- glm(cost ~. , data = DATA)
summary(modelq2)
library(readxl)
library(readr)
library(tidyverse)
library(ggplot2)
library(stringr)
ggplot(data = CarEvaluate)+
geom_point(aes(x = car_age, y = avg_cost, color = car_value))+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "Level of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
plot1 <- coverage_long %>% group_by(option, level) %>% summarize(mean = mean(cost), number_of_deal = length(option))
coverage <- data[, c(25,16:24)]
names(coverage)[4:10] <- c("Collision", "Towing", "BI", "PD", "RR", "Comp", "Med/PIP")
coverage_long <- coverage %>% pivot_longer( 4:10, names_to = "option", values_to = "level")
plot1 <- coverage_long %>% group_by(option, level) %>% summarize(mean = mean(cost), number_of_deal = length(option))
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "Level of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "Coverage Option")+
facet_wrap(~option, ncol = 3)+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "cost of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "Quote for customers", y = "level of Coverage")+
facet_wrap(~option, ncol = 3)+
theme_bw()
ggplot(data = plot1)+
geom_point(aes(x = level, y = `mean`, size = `number_of_deal`, color = option))+
scale_color_brewer(palette = "Set2")+
labs(title = "Coverage Options & Amount vs. Quotes", x = "level of Coverage", y = "Quote for customers")+
facet_wrap(~option, ncol = 3)+
theme_bw()
modelq2pred
R2(y, modelq2pred,"gaussian")
model2pred
##
predict (result, newdata = new.customers)
#######################################################
### Undercutting ALLSTATE online Case
###
###
### Load additional file to install packages
source("DataAnalyticsFunctions.R")
###
###
### Load ALLSTATE DATA FILE
ALLcost <- read.csv("ALLSTATEcost.csv")
###
###
### Data Preparation ###########################
################################################
###
### Lets see a summary of it
###
summary(ALLcost)
### there are plenty of things to decide here.
### Which variables have NA's:
### risk_factor also has NA (that should be also a level)
### duration_previous it has 0 and NA's we probably need to treat them differently.
### C_previous
### location
###
### Lets print the first 6 data points
ALLcost[1:6,]
### we see that the first customer requested 2 quotes
### if we are predicting the behavior of the customer, we should take that in consideration
### but first we will predict the cost quoted by ALLSTATE
### so we start by assuming it does not discriminate across used id and shopping_pt (an assumption)
drop <- c("customer_ID","shopping_pt","record_type","time","location")
### This creates a dataframe (DATA) from d without the columns in drops
DATA <- ALLcost[,!(names(ALLcost) %in% drop)]
###
DATA$car_value <-  factor(DATA$car_value)
DATA$day <-  factor(DATA$day)
DATA$state <-  factor(DATA$state)
duration_NA <-  ifelse( is.na(DATA$duration_previous) , 1, 0 )        ### creating a dummy variable for NA
### number of NA in duration
sum(duration_NA)
### corresponds to 5% of the sample 783/15483
sum(duration_NA)/length(duration_NA)
### It is not that big and we could just drop them in a first analysis
### however we wil create a dummy variable
DATA$duration_previous[duration_NA>0] <-0 ### making NA to zero
### lets look at C_previous
C_NA <-  ifelse( is.na(DATA$C_previous), 1, 0 )        ### creating a dummy variable for NA
### how many?
sum(C_NA)
### very suspecious...
cor(C_NA,duration_NA)
### HAHA... the same observations that do not report previous duration...
### Lets treat C_previous as factor
DATA$C_previous[C_NA>0] <-0 ### making NA to zero
DATA$C_previous <-  factor(DATA$C_previous)
### Lets look at risk_factor as well...
risk_NA <- ifelse( is.na(DATA$risk_factor), 1, 0 )
sum(risk_NA)
### The NA for those are different observations...
DATA$risk_factor[risk_NA>0] <-0
### treat thatas a level "0" (a new category of risk...)
DATA$risk_factor <-  factor(DATA$risk_factor)
###
DATA$homeowner <-  factor(DATA$homeowner)
DATA$married_couple <-  factor(DATA$married_couple)
summary(DATA)
#################################
#### Question 2: A first linear Regression Model.
####             Feel free to use this or improve upon it.
#### this is a linear regression with all the variables in DATA
result <- glm(cost ~ ., data = DATA)
### and to see the results (coefficients, p-values, etc...)
summary(result)
### the R-squared in this case is
1 - (result$dev/result$null)
### As a side note, note that when running regressions,
### sometimes R creates new columns automatically to run the regression
### for example, it creates dummies for you if you have columns that are
### factors. To get matrix with all these columns explicitly created
### for the following regression
result <- glm(cost ~ ., data = DATA)
### the R-squared in this case is
1 - (result$dev/result$null)
1 - (modelq2$dev/modelq2$null)
### As a side note, note that when running regressions,
### sometimes R creates new columns automatically to run the regression
### for example, it creates dummies for you if you have columns that are
### factors. To get matrix with all these columns explicitly created
### for the following regression
result <- glm(cost ~ ., data = DATA)
### simply use the command "model.matrix" as follows
M <- model.matrix(cost~., data = DATA)
summary(M)
### thus the same regression can be run as
resultM <- glm(DATA$cost ~ M)
### Just to make sure, lets see that R2 match...
1 - (resultM$dev/resultM$null)
### As a side note, note that when running regressions,
### sometimes R creates new columns automatically to run the regression
### for example, it creates dummies for you if you have columns that are
### factors. To get matrix with all these columns explicitly created
### for the following regression
result <- glm(cost ~ ., data = DATA)
### simply use the command "model.matrix" as follows
M <- model.matrix(cost~., data = DATA)
summary(M)
### thus the same regression can be run as
resultM <- glm(DATA$cost ~ M)
### Just to make sure, lets see that R2 match...
1 - (resultM$dev/resultM$null)
### As a side note, note that when running regressions,
### sometimes R creates new columns automatically to run the regression
### for example, it creates dummies for you if you have columns that are
### factors. To get matrix with all these columns explicitly created
### for the following regression
result <- glm(cost ~ ., data = DATA)
### simply use the command "model.matrix" as follows
M <- model.matrix(cost~., data = DATA)
summary(M)
### thus the same regression can be run as
resultM <- glm(DATA$cost ~ M)
#### Another model one can consider is the one that
#### would include interactions based
#### on the the coverage options A through G
#### we can add those interactions in addition to the previous variables
result_interactions <- glm(cost ~ .+(A+B+C+D+E+F+G)^2, data = DATA)
## The following command loads the "new.customers" to memory
## it is already formatted in our conventions
## (where NA's in some variables were turned to level "0")
new.customers <- readRDS("NewCustomers.Rda")
##
predict (result, newdata = new.customers)
##
str(new.customers)
##
str(DATA)
str(new.customers)
str(new.customers)
##
str(DATA)
str(new.customers)
predict (result, newdata = new.customers)
##
str(DATA)
names(DATA)
names(DATA)
##
str(DATA)
### As a side note, note that when running regressions,
### sometimes R creates new columns automatically to run the regression
### for example, it creates dummies for you if you have columns that are
### factors. To get matrix with all these columns explicitly created
### for the following regression
result <- glm(cost ~ ., data = DATA)
#### Another model one can consider is the one that
#### would include interactions based
#### on the the coverage options A through G
#### we can add those interactions in addition to the previous variables
result_interactions <- glm(cost ~ .+(A+B+C+D+E+F+G)^2, data = DATA)
modelq2 <- glm(cost ~. , data = DATA)
summary(modelq2)
modelq2pred <- predict(modelq2, newdata = new.customers)
#### Another model one can consider is the one that
#### would include interactions based
#### on the the coverage options A through G
#### we can add those interactions in addition to the previous variables
result_interactions <- glm(cost ~ .+(A+B+C+D+E+F+G)^2, data = DATA)
summary(result_interactions)
### we see that the first customer requested 2 quotes
### if we are predicting the behavior of the customer, we should take that in consideration
### but first we will predict the cost quoted by ALLSTATE
### so we start by assuming it does not discriminate across used id and shopping_pt (an assumption)
drop <- c("customer_ID","shopping_pt","record_type","time","location")
### This creates a dataframe (DATA) from d without the columns in drops
DATA <- ALLcost[,!(names(ALLcost) %in% drop)]
###
DATA$car_value <-  factor(DATA$car_value)
DATA$day <-  factor(DATA$day)
DATA$state <-  factor(DATA$state)
duration_NA <-  ifelse( is.na(DATA$duration_previous) , 1, 0 )        ### creating a dummy variable for NA
### It is not that big and we could just drop them in a first analysis
### however we wil create a dummy variable
DATA$duration_previous[duration_NA>0] <-0 ### making NA to zero
### HAHA... the same observations that do not report previous duration...
### Lets treat C_previous as factor
DATA$C_previous[C_NA>0] <-0 ### making NA to zero
DATA$C_previous <-  factor(DATA$C_previous)
### The NA for those are different observations...
DATA$risk_factor[risk_NA>0] <-0
### treat thatas a level "0" (a new category of risk...)
DATA$risk_factor <-  factor(DATA$risk_factor)
###
DATA$homeowner <-  factor(DATA$homeowner)
DATA$married_couple <-  factor(DATA$married_couple)
#### Another model one can consider is the one that
#### would include interactions based
#### on the the coverage options A through G
#### we can add those interactions in addition to the previous variables
result_interactions <- glm(cost ~ .+(A+B+C+D+E+F+G)^2, data = DATA)
summary(result_interactions)
View(DATA)
plot(cost ~ factor(risk_factor), data = data)
plot(factor(risk_factor) ~ cost, data = data)
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color)
plot2Color <- brewer.pal(n = 4, name = "Pastel1")
plot(factor(homeowner) ~ cost, col = plot2Color, xlab = "Quote for customer", ylab = "Homeowner", data = customerGroup)
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color)
plot2Color <- brewer.pal(n = 4, name = "BrBG")
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color)
plot2Color <- brewer.pal(n = 4, name = "Blues")
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color)
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color, xlab = risk_factor)
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color, xlab = "risk_factor")
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color, ylab = "risk_factor")
plot(factor(risk_factor) ~ cost, data = data, col = -plot2Color, ylab = "risk_factor")
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color, ylab = "risk_factor")
plot2Color <- rev(brewer.pal(n = 4, name = "Blues"))
plot(factor(risk_factor) ~ cost, data = data, col = plot2Color, ylab = "risk_factor")
CarEvaluate <- data[, c(25, 10,11)] %>%
group_by(car_value, car_age) %>%
summarize(avg_cost = mean(cost), count = length(avg_cost))
ggplot(data = CarEvaluate)+
geom_point(aes(x = car_age, y = avg_cost, color = car_value))+
theme_bw()
